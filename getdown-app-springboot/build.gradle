buildscript {
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version")
		classpath "gradle.plugin.io.gatling.gradle:gatling-gradle-plugin:3.4.0"
	}
}


apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

apply plugin: "io.gatling.gradle"
gatling {
	toolVersion = '2.2.2'
	jvmArgs = [ '-server', '-Xms512M', '-Xmx512M' ]
	logLevel ='DEBUG'
}
sourceSets {
	gatling {
		compileClasspath += sourceSets.main.compileClasspath
		compileClasspath += sourceSets.test.compileClasspath
		runtimeClasspath += sourceSets.main.runtimeClasspath
		runtimeClasspath += sourceSets.test.runtimeClasspath
	}
}




dependencies {
	implementation project(':getdown-core')
//	implementation project(':getdown-ux-console')

	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.springframework.boot:spring-boot-starter-logging")
	implementation("org.springframework.boot:spring-boot-starter-actuator")

	implementation("org.springframework:spring-messaging")
	implementation("io.projectreactor.spring:reactor-spring-context:$reactor_spring_version")
	implementation "io.projectreactor:reactor-core:$reactor_version"
	implementation "io.projectreactor:reactor-bus:$reactor_version"
	implementation "io.projectreactor:reactor-stream:$reactor_version"

	implementation 'org.springframework.hateoas:spring-hateoas:0.20.0.RELEASE'


	implementation 'org.slf4j:slf4j-api:1.7.10'

	testImplementation 'junit:junit:4.13.1'
	testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: "$logback_version"
	testImplementation("org.springframework.boot:spring-boot-starter-test")

	// helper libs
	testImplementation("org.apache.httpcomponents:httpclient:${apache_http_version}")
	testImplementation("org.apache.httpcomponents:fluent-hc:${apache_http_version}")
}

compileJava.dependsOn(processResources)

task docker(dependsOn: build) {

	dependsOn 'dockerBuild'

}

task dockerBuild(type: Exec){
	def stageDir = file(project.buildDir.absolutePath + '/docker')

	workingDir stageDir
	executable = 'docker'
	args=['build', '-t', "lumue/getdown:${project.version}", '.']

	doFirst {
		copy {
			from jar
			into stageDir
		}
		copy {
			from file('src/main/docker/Dockerfile')
			into stageDir
		}
	}

}

task dockerRun(type: Exec){

	dependsOn 'dockerBuild'

	def stageDir = file(project.buildDir.absolutePath + '/docker')

	workingDir stageDir
	executable = 'docker'
	args=['run','-d',
	      '--name',"getdown_${project.version}",
	      '-p','8101:8001',
	      "lumue/getdown:${project.version}"]

	doLast{
		sleep(10*1000)
	}

}

task dockerStop(type: Exec){

	def stageDir = file(project.buildDir.absolutePath + '/docker')

	workingDir stageDir
	executable = 'docker'
	args=['stop',"getdown_${project.version}"]

	ignoreExitValue true

}

task dockerRemove(type: Exec){

	dependsOn 'dockerStop'

	def stageDir = file(project.buildDir.absolutePath + '/docker')

	workingDir stageDir
	executable = 'docker'
	args=['rm','-f',"getdown_${project.version}"]

	ignoreExitValue true
}

task dockerTagLatest(type: Exec){

	mustRunAfter 'dockerBuild'

	def stageDir = file(project.buildDir.absolutePath + '/docker')

	workingDir stageDir
	executable = 'docker'
	args= ['tag', "lumue/getdown:${project.version}", 'lumue/getdown:latest']

}

task loadTest{
	dependsOn 'dockerRun','gatlingRun'
	finalizedBy 'dockerRemove'
}